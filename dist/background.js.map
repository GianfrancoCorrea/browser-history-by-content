{"version":3,"file":"background.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,qBAAqBA,CAACC,QAAQ,EAAE;EACrCC,MAAM,CAACC,IAAI,CAACC,KAAK,CAAC;IAAEC,MAAM,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC,EAAE,UAACH,IAAI,EAAK;IAC/D,IAAIA,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;MACjBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B,IAAMC,GAAG,GAAGP,IAAI,CAAC,CAAC,CAAC;MACnBK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,sDAAsD,EAAEC,GAAG,CAAC;MACvFR,MAAM,CAACC,IAAI,CAACQ,WAAW,CAACD,GAAG,CAACE,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAa,CAAC,EAAE,UAACC,QAAQ,EAAK;QACpEN,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,sDAAsD,EAAEK,QAAQ,CAAC;QACjG,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;UAC9Bd,QAAQ,CAACa,QAAQ,CAACC,OAAO,CAAC;QAC9B,CAAC,MAAM;UACHd,QAAQ,CAAC,IAAI,CAAC;QAClB;MACJ,CAAC,CAAC;IACN,CAAC,MAAM;MACHA,QAAQ,CAAC,IAAI,CAAC;IAClB;EACJ,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAD,qBAAqB,CAAC,UAACe,OAAO,EAAK;EAC/BP,OAAO,CAACC,GAAG,CAACM,OAAO,CAAC;EACpBC,KAAK,CAAC,gCAAgC,EAAE;IACpCC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE,IAAIC,eAAe,CAAC;MACtB,MAAM,EAAEJ,OAAO;MACf,KAAK,EAAE,wBAAwB;MAC/B,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC,CACGK,IAAI,CAAC,UAAAN,QAAQ;IAAA,OAAIA,QAAQ,CAACO,IAAI,CAAC,CAAC;EAAA,EAAC,CACjCD,IAAI,CAAC,UAAAE,IAAI,EAAI;IACVd,OAAO,CAACC,GAAG,CAACa,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,SACI,CAAC,UAAAC,KAAK,EAAI;IACZf,OAAO,CAACe,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC,C","sources":["webpack://history_challenge/./src/background.js"],"sourcesContent":["/* \r\n// Escucha el evento de instalación de la extensión\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    // Obtiene el historial de navegación\r\n    chrome.history.search({ text: '', maxResults: 10 }, (historyItems) => {\r\n        // Procesa los elementos del historial\r\n        historyItems.forEach((item) => {\r\n            console.log(item.url);\r\n            // Realiza las acciones necesarias con cada elemento del historial\r\n        });\r\n    });\r\n});\r\n\r\n\r\n// Datos de prueba del historial de navegación\r\nconst historyData = [\r\n    { url: 'https://www.example.com/page1', title: 'Página 1' },\r\n    { url: 'https://www.example.com/page2', title: 'Página 2' },\r\n    // Agrega más objetos de historial de prueba aquí\r\n];\r\n\r\n// Obtener el historial de navegación de prueba\r\nfunction getMockHistory(callback) {\r\n    callback(historyData);\r\n}\r\n\r\n// Llama a la función getMockHistory en lugar de chrome.history.search\r\ngetMockHistory((historyItems) => {\r\n    // Procesa los elementos del historial de navegación de prueba\r\n    historyItems.forEach((item) => {\r\n        console.log(item.url);\r\n        // Realiza las acciones necesarias con cada elemento del historial\r\n    });\r\n}); */\r\n\r\n// Función para obtener el contenido de la página web actual\r\nfunction getCurrentPageContent(callback) {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n        if (tabs.length > 0) {\r\n            console.log('tabs length > 0')\r\n            const tab = tabs[0];\r\n            console.log('%c 🍇 tab: ', 'font-size:12px;background-color: #4b4b4b;color:#fff;', tab);\r\n            chrome.tabs.sendMessage(tab.id, { action: 'getContent' }, (response) => {\r\n                console.log('%c 🥜 response: ', 'font-size:12px;background-color: #FFDD4D;color:#fff;', response);\r\n                if (response && response.content) {\r\n                    callback(response.content);\r\n                } else {\r\n                    callback(null);\r\n                }\r\n            });\r\n        } else {\r\n            callback(null);\r\n        }\r\n    });\r\n}\r\n\r\n/* (async () => {\r\n    const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\r\n    console.log('%c 🥦 tab: ', 'font-size:12px;background-color: #42b983;color:#fff;', tab);\r\n    const response = await chrome.tabs.sendMessage(tab.id, { greeting: \"hello\" });\r\n    // do something with response here, not outside the function\r\n    console.log(response);\r\n})(); */\r\n\r\n// Llamada a getCurrentPageContent\r\ngetCurrentPageContent((content) => {\r\n    console.log(content);\r\n    fetch('http://127.0.0.1:5000/api/html', {\r\n        method: 'POST',\r\n        body: new URLSearchParams({\r\n            'html': content,\r\n            'url': 'https://www.google.com',\r\n            'title': 'Página 2'\r\n        })\r\n    })\r\n        .then(response => response.text())\r\n        .then(data => {\r\n            console.log(data); // Muestra la respuesta recibida desde la API\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n        });\r\n    // Haz algo con el contenido de la página web actual\r\n});"],"names":["getCurrentPageContent","callback","chrome","tabs","query","active","currentWindow","length","console","log","tab","sendMessage","id","action","response","content","fetch","method","body","URLSearchParams","then","text","data","error"],"sourceRoot":""}